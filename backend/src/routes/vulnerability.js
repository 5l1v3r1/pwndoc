module.exports = function(app) {

    var Response = require('../lib/httpResponse.js');
    var auth = require('../lib/auth');
    var Vulnerability = require('mongoose').model('Vulnerability');
    var VulnerabilityUpdate = require('mongoose').model('VulnerabilityUpdate');

    // Get vulnerabilities list
    app.get("/api/vulnerabilities", auth.hasRole('user'), function(req, res) {
        Vulnerability.getAll()
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Get vulnerabilities for export
    app.get("/api/vulnerabilities/export", auth.hasRole('user'), function(req, res) {
        Vulnerability.export()
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Create vulnerabilities (array of vulnerabilities)
    app.post("/api/vulnerabilities", auth.hasRole('admin'), function(req, res) {
        req.body.forEach(vuln => {
            if (!vuln.details) {
                Response.BadParameters(res, 'Required parameters: details.locale, details.title');
                return;
            }
            var index = vuln.details.findIndex(obj => (obj.locale !== '' && obj.title !== ''));
            if (index < 0) {
                Response.BadParameters(res, 'Required parameters: details.locale, details.title');
                return;
            }
        });

        var vulnerabilities = [];
        for (var i=0; i<req.body.length; i++) {
            var vuln = {}
            vuln.cvssv3 = req.body[i].cvssv3 || null;
            vuln.cvssScore = req.body[i].cvssScore || null;
            switch (true) {
                case (vuln.cvssScore > 0 && vuln.cvssScore < 4):
                    vuln.cvssSeverity = 'Low';
                    break;
                case (vuln.cvssScore >= 4 && vuln.cvssScore < 7):
                    vuln.cvssSeverity = 'Medium';
                    break;
                case (vuln.cvssScore >= 7 && vuln.cvssScore < 9):
                    vuln.cvssSeverity = 'High';
                    break;
                case (vuln.cvssScore >= 9 && vuln.cvssScore <= 10):
                    vuln.cvssSeverity = 'Critical';
                    break;
                default:
                    vuln.cvssSeverity = 'None';
                    break;
            };
            vuln.priority = req.body[i].priority || null;
            vuln.remediationComplexity = req.body[i].remediationComplexity || null;
            vuln.references = req.body[i].references || null;
            vuln.details = [];
            req.body[i].details.forEach(d => {
                if (!d.title)
                    return;
                var details = {};
                if (d.locale) details.locale = d.locale;
                if (d.title) details.title = d.title;
                details.vulnType = d.vulnType || null;
                details.description = d.description || null;
                details.observation = d.observation || null;
                details.remediation = d.remediation || null;
                vuln.details.push(details);
            })
            vuln.status = 0;
            vulnerabilities.push(vuln);
        }
        Vulnerability.create(vulnerabilities)
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Update vulnerability
    app.put("/api/vulnerabilities/:vulnerabilityId", auth.hasRole('admin'), function(req, res) {
        if (!req.body.details) {
            Response.BadParameters(res, 'Required parameters: details.locale, details.title');
            return;
        }
        var index = req.body.details.findIndex(obj => (obj.locale !== '' && obj.title !== ''));
        if (index < 0) {
            Response.BadParameters(res, 'Required parameters: details.locale, details.title');
            return;
        }

        var vuln = {}
        vuln.cvssv3 = req.body.cvssv3 || null;
        vuln.cvssScore = req.body.cvssScore || null;
        vuln.cvssSeverity = req.body.cvssSeverity || null;
        vuln.priority = req.body.priority || null;
        vuln.remediationComplexity = req.body.remediationComplexity || null;
        vuln.references = req.body.references || null;
        vuln.details = [];
        req.body.details.forEach(d => {
            var details = {};
            if (d.locale) details.locale = d.locale;
            if (d.title) details.title = d.title;
            details.vulnType = d.vulnType || null;
            details.description = d.description || null;
            details.observation = d.observation || null;
            details.remediation = d.remediation || null;
            vuln.details.push(details);
        })
        vuln.status = 0;
        
        Vulnerability.update(req.params.vulnerabilityId, vuln)
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Delete vulnerability
    app.delete("/api/vulnerabilities/:vulnerabilityId", auth.hasRole('admin'), function(req, res) {
        Vulnerability.delete(req.params.vulnerabilityId)
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Delete all vulnerabilities
    app.delete("/api/vulnerabilities", auth.hasRole('admin'), function(req, res) {
        Vulnerability.deleteAll()
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Get vulnerabilities list by language
    app.get("/api/vulnerabilities/:locale", auth.hasRole('user'), function(req, res) {
        Vulnerability.getAllByLanguage(req.params.locale)
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Create or Update vulnerability from finding for validation
    app.post("/api/vulnerabilities/finding/:locale", auth.hasRole('user'), function(req, res) {
        if (!req.body.title) {
            Response.BadParameters(res, 'Required parameters: title');
            return;
        }
        
        var vuln = {}
        vuln.cvssv3 = req.body.cvssv3 || null;
        vuln.cvssScore = req.body.cvssScore || null;
        vuln.cvssSeverity = req.body.cvssSeverity || null;
        vuln.priority = req.body.priority || null;
        vuln.remediationComplexity = req.body.remediationComplexity || null;
        vuln.references = req.body.references || null;
        vuln.locale = req.params.locale || null;
        vuln.title = req.body.title || null;
        vuln.vulnType = req.body.vulnType || null;
        vuln.description = req.body.description || null;
        vuln.observation = req.body.observation || null;
        vuln.remediation = req.body.remediation || null;

        VulnerabilityUpdate.create(req.decodedToken.username, vuln)
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Get vulnerability updates form vuln id
    app.get("/api/vulnerabilities/updates/:vulnId", auth.hasRole('user'), function(req, res) {
        VulnerabilityUpdate.getAllByVuln(req.params.vulnId)
        .then(msg => Response.Ok(res, msg))
        .catch(err => Response.Internal(res, err))
    });

    // Merge vulnerability with locale part of another one
    app.put("/api/vulnerabilities/merge/:vulnId", auth.hasRole('admin'), function(req, res) {
        if (!req.body.vulnId || !req.body.locale) {
            Response.BadParameters(res, 'Required parameters: vulnId, locale');
            return;
        }

        Vulnerability.Merge(req.params.vulnId, req.body.vulnId, req.body.locale)
        .then(() => Response.Ok(res, 'Vulnerability merge successfully'))
        .catch(err => Response.Internal(res, err))
    })
}